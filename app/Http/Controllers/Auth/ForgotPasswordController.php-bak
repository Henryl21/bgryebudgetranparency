<?php
namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Str;
use App\Services\PHPMailerService;
use App\Models\Officer; // Add the officer model
use App\Models\Admin;   // Add the admin model

class ForgotPasswordController extends Controller
{
    // Show the Forgot Password form for officers
    public function showOfficerForgotPasswordForm()
    {
        return view('officer.auth.forgot-password'); // Officer specific view
    }

    // Send the reset password link to the officer's email
    public function sendOfficerResetLink(Request $request)
    {
        $request->validate([
            'email' => 'required|email|exists:officers,email',  // Only validate against officers' email
        ]);

        return $this->sendResetLink($request, 'officer');
    }

    // Show the Forgot Password form for admins
    public function showAdminForgotPasswordForm()
    {
        return view('admin.auth.forgot-password'); // Admin specific view
    }

    // Send the reset password link to the admin's email
    public function sendAdminResetLink(Request $request)
    {
        $request->validate([
            'email' => 'required|email|exists:admins,email',  // Only validate against admins' email
        ]);

        return $this->sendResetLink($request, 'admin');
    }

    // Shared logic for sending the reset password link
    private function sendResetLink(Request $request, $role)
    {
        $email = $request->input('email');
        $token = bin2hex(random_bytes(32));
        $hashedToken = Hash::make($token);

        try {
            // Store the token and timestamp in the password_resets table
            DB::table('password_resets')->updateOrInsert(
                ['email' => $email, 'role' => $role],
                ['token' => $hashedToken, 'created_at' => now()]
            );

            $resetLink = route($role . '.reset.password', ['token' => $token, 'email' => $email]);

            $mailer = new PHPMailerService();
            $success = $mailer->sendResetLinkEmail($email, $resetLink);

            if ($success) {
                return back()->with('success', 'Password reset link has been sent to your email.');
            } else {
                return back()->withErrors(['email' => 'Failed to send reset email. Please try again later.']);
            }
        } catch (\Exception $e) {
            \Log::error('Failed to store password reset token: ' . $e->getMessage());
            return back()->withErrors(['email' => 'Failed to process reset request. Please try again later.']);
        }
    }
}
